    "# # Pandas: Data Manipulation and Analysis in Python\n",
    "# \n",
    "# ## Introduction\n",
    "# \n",
    "# Pandas is a powerful Python library for data manipulation and analysis. It provides data structures and functions needed to efficiently work with structured data. The two primary data structures in pandas are:\n",
    "# \n",
    "# - **Series**: One-dimensional labeled array\n",
    "# - **DataFrame**: Two-dimensional labeled data structure with columns of potentially different types\n",
    "# \n",
    "# This section will introduce you to the most essential pandas concepts and functions that are widely used in machine learning and data science projects.\n",
    "# \n",
    "# **Source:** [Pandas Documentation](https://pandas.pydata.org/docs/) and [Hands-On Data Analysis with Pandas](https://github.com/stefmolin/Hands-On-Data-Analysis-with-Pandas-2nd-edition)\n",
    "\n",
    "# ## Why Pandas?\n",
    "# \n",
    "# Pandas bridges the gap between NumPy arrays and more complex data structures. It excels at:\n",
    "# \n",
    "# - Handling missing data\n",
    "# - Data alignment and integration\n",
    "# - Reshaping and pivoting datasets\n",
    "# - Merging and joining datasets\n",
    "# - Time series functionality\n",
    "# - Reading/writing different data formats\n",
    "# \n",
    "# These capabilities make pandas the go-to library for data preprocessing in machine learning workflows.\n",
    "# \n",
    "# **Source:** [Data Analysis Projects With Pandas](https://github.com/mohammadreza-mohammadi94/Data-Analysis-Projects-With-Pandas)\n",
    "\n",
    "# ## 1. Pandas Data Structures\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5ee41750",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "\n",
    "# Import pandas\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "\n",
    "# ### 1.1 Series\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "caf4db07",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "\n",
    "# Creating a Series from a list\n",
    "s1 = pd.Series([1, 2, 3, 4, 5])\n",
    "print(\"Series from list:\")\n",
    "print(s1)\n",
    "\n",
    "# Creating a Series with custom index\n",
    "s2 = pd.Series([10, 20, 30, 40, 50], index=['a', 'b', 'c', 'd', 'e'])\n",
    "print(\"\\nSeries with custom index:\")\n",
    "print(s2)\n",
    "\n",
    "# Creating a Series from a dictionary\n",
    "s3 = pd.Series({'a': 100, 'b': 200, 'c': 300})\n",
    "print(\"\\nSeries from dictionary:\")\n",
    "print(s3)\n",
    "\n",
    "# Accessing elements\n",
    "print(\"\\nAccessing elements:\")\n",
    "print(\"s2['a'] =\", s2['a'])\n",
    "print(\"s2[['a', 'c', 'e']] =\")\n",
    "print(s2[['a', 'c', 'e']])\n",
    "\n",
    "\n",
    "# ### 1.2 DataFrame\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1400c634",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "\n",
    "# Creating a DataFrame from a dictionary of Series\n",
    "data = {\n",
    "    'Name': pd.Series(['Alice', 'Bob', 'Charlie', 'David']),\n",
    "    'Age': pd.Series([25, 30, 35, 40]),\n",
    "    'City': pd.Series(['New York', 'Boston', 'Chicago', 'Denver'])\n",
    "}\n",
    "\n",
    "df1 = pd.DataFrame(data)\n",
    "print(\"DataFrame from dictionary of Series:\")\n",
    "print(df1)\n",
    "\n",
    "# Creating a DataFrame from a dictionary of lists\n",
    "data = {\n",
    "    'Name': ['Eve', 'Frank', 'Grace', 'Heidi'],\n",
    "    'Age': [22, 27, 32, 37],\n",
    "    'City': ['Miami', 'Seattle', 'Austin', 'Portland'],\n",
    "    'Salary': [50000, 60000, 70000, 80000]\n",
    "}\n",
    "\n",
    "df2 = pd.DataFrame(data)\n",
    "print(\"\\nDataFrame from dictionary of lists:\")\n",
    "print(df2)\n",
    "\n",
    "# Creating a DataFrame from a list of dictionaries\n",
    "data = [\n",
    "    {'Name': 'Ivan', 'Age': 31, 'City': 'San Francisco'},\n",
    "    {'Name': 'Julia', 'Age': 36, 'City': 'Los Angeles'},\n",
    "    {'Name': 'Karl', 'Age': 41, 'City': 'San Diego'}\n",
    "]\n",
    "\n",
    "df3 = pd.DataFrame(data)\n",
    "print(\"\\nDataFrame from list of dictionaries:\")\n",
    "print(df3)\n",
    "\n",
    "# Creating a DataFrame from a 2D NumPy array\n",
    "array = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n",
    "df4 = pd.DataFrame(array, columns=['A', 'B', 'C'], index=['x', 'y', 'z'])\n",
    "print(\"\\nDataFrame from 2D NumPy array:\")\n",
    "print(df4)\n",
    "\n",
    "\n",
    "# ## 2. Basic DataFrame Operations\n",
    "\n",
    "# ### 2.1 Accessing Data\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6d1c6281",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "\n",
    "# Create a sample DataFrame\n",
    "data = {\n",
    "    'Name': ['Alice', 'Bob', 'Charlie', 'David', 'Eve'],\n",
    "    'Age': [25, 30, 35, 40, 45],\n",
    "    'City': ['New York', 'Boston', 'Chicago', 'Denver', 'Miami'],\n",
    "    'Salary': [50000, 60000, 70000, 80000, 90000],\n",
    "    'Department': ['HR', 'IT', 'Finance', 'Marketing', 'Operations']\n",
    "}\n",
    "\n",
    "df = pd.DataFrame(data)\n",
    "print(\"Sample DataFrame:\")\n",
    "print(df)\n",
    "\n",
    "# Accessing columns\n",
    "print(\"\\nAccessing the 'Name' column:\")\n",
    "print(df['Name'])\n",
    "\n",
    "# Accessing multiple columns\n",
    "print(\"\\nAccessing 'Name' and 'Salary' columns:\")\n",
    "print(df[['Name', 'Salary']])\n",
    "\n",
    "# Accessing rows using loc (label-based)\n",
    "print(\"\\nAccessing row at index 2 using loc:\")\n",
    "print(df.loc[2])\n",
    "\n",
    "# Accessing rows using iloc (position-based)\n",
    "print(\"\\nAccessing row at position 2 using iloc:\")\n",
    "print(df.iloc[2])\n",
    "\n",
    "# Accessing specific cells\n",
    "print(\"\\nAccessing the cell at row 1, column 'Age':\")\n",
    "print(df.loc[1, 'Age'])\n",
    "\n",
    "# Accessing a range of rows and columns\n",
    "print(\"\\nAccessing rows 1-3 and columns 'Name', 'Age', 'Salary':\")\n",
    "print(df.loc[1:3, ['Name', 'Age', 'Salary']])\n",
    "\n",
    "# Getting basic information about the DataFrame\n",
    "print(\"\\nDataFrame info:\")\n",
    "df.info()\n",
    "\n",
    "# Getting statistical summary\n",
    "print(\"\\nStatistical summary:\")\n",
    "print(df.describe())\n",
    "\n",
    "\n",
    "# ### 2.2 Adding and Removing Data\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2352dca9",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "\n",
    "# Create a sample DataFrame\n",
    "df = pd.DataFrame({\n",
    "    'Name': ['Alice', 'Bob', 'Charlie'],\n",
    "    'Age': [25, 30, 35],\n",
    "    'City': ['New York', 'Boston', 'Chicago']\n",
    "})\n",
    "print(\"Original DataFrame:\")\n",
    "print(df)\n",
    "\n",
    "# Adding a new column\n",
    "df['Salary'] = [50000, 60000, 70000]\n",
    "print(\"\\nAfter adding 'Salary' column:\")\n",
    "print(df)\n",
    "\n",
    "# Adding a column with a default value\n",
    "df['Department'] = 'HR'\n",
    "print(\"\\nAfter adding 'Department' column with default value:\")\n",
    "print(df)\n",
    "\n",
    "# Adding a column based on other columns\n",
    "df['Salary_After_Bonus'] = df['Salary'] * 1.1\n",
    "print(\"\\nAfter adding 'Salary_After_Bonus' column:\")\n",
    "print(df)\n",
    "\n",
    "# Adding a row using loc\n",
    "df.loc[3] = ['David', 40, 'Denver', 80000, 'IT', 88000]\n",
    "print(\"\\nAfter adding a new row:\")\n",
    "print(df)\n",
    "\n",
    "# Adding a row using append (deprecated in newer versions, but still useful to know)\n",
    "new_row = pd.DataFrame({'Name': ['Eve'], 'Age': [45], 'City': ['Miami'], \n",
    "                         'Salary': [90000], 'Department': ['Finance'], \n",
    "                         'Salary_After_Bonus': [99000]})\n",
    "df = pd.concat([df, new_row], ignore_index=True)\n",
    "print(\"\\nAfter adding another row using concat:\")\n",
    "print(df)\n",
    "\n",
    "# Removing a column\n",
    "df = df.drop('Salary_After_Bonus', axis=1)\n",
    "print(\"\\nAfter removing 'Salary_After_Bonus' column:\")\n",
    "print(df)\n",
    "\n",
    "# Removing a row\n",
    "df = df.drop(1, axis=0)\n",
    "print(\"\\nAfter removing row at index 1:\")\n",
    "print(df)\n",
    "\n",
    "# Resetting index\n",
    "df = df.reset_index(drop=True)\n",
    "print(\"\\nAfter resetting index:\")\n",
    "print(df)\n",
    "\n",
    "\n",
    "# ### 2.3 Filtering and Sorting\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7826b764",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "\n",
    "# Create a sample DataFrame\n",
    "data = {\n",
    "    'Name': ['Alice', 'Bob', 'Charlie', 'David', 'Eve', 'Frank', 'Grace'],\n",
    "    'Age': [25, 30, 35, 40, 25, 35, 30],\n",
    "    'City': ['New York', 'Boston', 'Chicago', 'Denver', 'Miami', 'Seattle', 'Austin'],\n",
    "    'Department': ['HR', 'IT', 'Finance', 'IT', 'HR', 'Finance', 'Marketing'],\n",
    "    'Salary': [50000, 60000, 70000, 80000, 55000, 75000, 65000]\n",
    "}\n",
    "\n",
    "df = pd.DataFrame(data)\n",
    "print(\"Sample DataFrame:\")\n",
    "print(df)\n",
    "\n",
    "# Filtering rows based on a condition\n",
    "print(\"\\nEmployees with Age > 30:\")\n",
    "print(df[df['Age'] > 30])\n",
    "\n",
    "# Filtering with multiple conditions (AND)\n",
    "print(\"\\nEmployees in IT department with Salary > 70000:\")\n",
    "print(df[(df['Department'] == 'IT') & (df['Salary'] > 70000)])\n",
    "\n",
    "# Filtering with multiple conditions (OR)\n",
    "print(\"\\nEmployees in HR or Finance departments:\")\n",
    "print(df[(df['Department'] == 'HR') | (df['Department'] == 'Finance')])\n",
    "\n",
    "# Filtering with .isin()\n",
    "print(\"\\nEmployees in specific cities (New York, Miami, Austin):\")\n",
    "print(df[df['City'].isin(['New York', 'Miami', 'Austin'])])\n",
    "\n",
    "# Filtering with string methods\n",
    "print(\"\\nEmployees whose names start with 'A' or 'B':\")\n",
    "print(df[df['Name'].str.startswith(('A', 'B'))])\n",
    "\n",
    "# Sorting by a single column\n",
    "print(\"\\nSorted by Age (ascending):\")\n",
    "print(df.sort_values('Age'))\n",
    "\n",
    "# Sorting by multiple columns\n",
    "print(\"\\nSorted by Department, then by Salary (descending):\")\n",
    "print(df.sort_values(['Department', 'Salary'], ascending=[True, False]))\n",
    "\n",
    "# Getting unique values\n",
    "print(\"\\nUnique Departments:\", df['Department'].unique())\n",
    "print(\"Value counts for Departments:\")\n",
    "print(df['Department'].value_counts())\n",
    "\n",
    "\n",
    "# ### 2.4 Handling Missing Data\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0f6c8145",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "\n",
    "# Create a DataFrame with missing values\n",
    "data = {\n",
    "    'A': [1, 2, np.nan, 4, 5],\n",
    "    'B': [np.nan, 2, 3, 4, 5],\n",
    "    'C': [1, 2, 3, np.nan, 5],\n",
    "    'D': [1, 2, 3, 4, 5]\n",
    "}\n",
    "\n",
    "df = pd.DataFrame(data)\n",
    "print(\"DataFrame with missing values:\")\n",
    "print(df)\n",
    "\n",
    "# Checking for missing values\n",
    "print(\"\\nMissing values per column:\")\n",
    "print(df.isnull().sum())\n",
    "\n",
    "# Dropping rows with any missing values\n",
    "print(\"\\nAfter dropping rows with any missing values:\")\n",
    "print(df.dropna())\n",
    "\n",
    "# Dropping rows with all missing values\n",
    "print(\"\\nAfter dropping rows with all missing values:\")\n",
    "print(df.dropna(how='all'))\n",
    "\n",
    "# Dropping columns with any missing values\n",
    "print(\"\\nAfter dropping columns with any missing values:\")\n",
    "print(df.dropna(axis=1))\n",
    "\n",
    "# Filling missing values with a specific value\n",
    "print(\"\\nAfter filling missing values with 0:\")\n",
    "print(df.fillna(0))\n",
    "\n",
    "# Filling missing values with column mean\n",
    "print(\"\\nAfter filling missing values with column mean:\")\n",
    "print(df.fillna(df.mean()))\n",
    "\n",
    "# Forward fill (propagate last valid observation forward)\n",
    "print(\"\\nAfter forward fill:\")\n",
    "print(df.fillna(method='ffill'))\n",
    "\n",
    "# Backward fill (use next valid observation to fill gap)\n",
    "print(\"\\nAfter backward fill:\")\n",
    "print(df.fillna(method='bfill'))\n",
    "\n",
    "\n",
    "# ## 3. Data Manipulation and Transformation\n",
    "\n",
    "# ### 3.1 Grouping and Aggregation\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "747969b7",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "\n",
    "# Create a sample DataFrame\n",
    "data = {\n",
    "    'Department': ['IT', 'HR', 'Finance', 'IT', 'HR', 'Finance', 'IT', 'Marketing'],\n",
    "    'Employee': ['Alice', 'Bob', 'Charlie', 'David', 'Eve', 'Frank', 'Grace', 'Heidi'],\n",
    "    'Salary': [60000, 50000, 70000, 65000, 55000, 75000, 62000, 67000],\n",
    "    'Experience': [3, 2, 5, 4, 3, 6, 2, 4],\n",
    "    'Performance': [4.5, 4.0, 4.7, 4.3, 3.8, 4.9, 4.2, 4.6]\n",
    "}\n",
    "\n",
    "df = pd.DataFrame(data)\n",
    "print(\"Sample DataFrame:\")\n",
    "print(df)\n",
    "\n",
    "# Grouping by a single column\n",
    "print(\"\\nAverage salary by department:\")\n",
    "print(df.groupby('Department')['Salary'].mean())\n",
    "\n",
    "# Multiple aggregations on a single column\n",
    "print(\"\\nSalary statistics by department:\")\n",
    "print(df.groupby('Department')['Salary'].agg(['min', 'max', 'mean', 'std']))\n",
    "\n",
    "# Multiple aggregations on multiple columns\n",
    "print(\"\\nMultiple statistics by department:\")\n",
    "print(df.groupby('Department').agg({\n",
    "    'Salary': ['min', 'max', 'mean'],\n",
    "    'Experience': ['min', 'max', 'mean'],\n",
    "    'Performance': ['min', 'max', 'mean']\n",
    "}))\n",
    "\n",
    "# Custom aggregation functions\n",
    "print(\"\\nCustom aggregation - salary range by department:\")\n",
    "print(df.groupby('Department')['Salary'].agg(lambda x: max(x) - min(x)))\n",
    "\n",
    "# Grouping by multiple columns\n",
    "print(\"\\nGrouping by Department and Experience:\")\n",
    "print(df.groupby(['Department', 'Experience'])['Salary'].mean())\n",
    "\n",
    "# Getting the group sizes\n",
    "print(\"\\nNumber of employees in each department:\")\n",
    "print(df.groupby('Department').size())\n",
    "\n",
    "# Using groupby with transformation\n",
    "print(\"\\nSalary compared to department average:\")\n",
    "df['Dept_Avg_Salary'] = df.groupby('Department')['Salary'].transform('mean')\n",
    "df['Salary_vs_Dept_Avg'] = df['Salary'] - df['Dept_Avg_Salary']\n",
    "print(df[['Department', 'Employee', 'Salary', 'Dept_Avg_Salary', 'Salary_vs_Dept_Avg']])\n",
    "\n",
    "\n",
    "# ### 3.2 Merging and Joining DataFrames\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7bf29b7c",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "\n",
    "# Create sample DataFrames\n",
    "employees = pd.DataFrame({\n",
    "    'EmployeeID': [1, 2, 3, 4, 5],\n",
    "    'Name': ['Alice', 'Bob', 'Charlie', 'David', 'Eve'],\n",
    "    'DepartmentID': [101, 102, 101, 103, 102]\n",
    "})\n",
    "\n",
    "departments = pd.DataFrame({\n",
    "    'DepartmentID': [101, 102, 103, 104],\n",
    "    'DepartmentName': ['IT', 'HR', 'Finance', 'Marketing'],\n",
    "    'Location': ['New York', 'Boston', 'Chicago', 'Denver']\n",
    "})\n",
    "\n",
    "salaries = pd.DataFrame({\n",
    "    'EmployeeID': [1, 2, 3, 4, 6],\n",
    "    'Salary': [60000, 50000, 70000, 65000, 55000],\n",
    "    'Bonus': [5000, 3000, 7000, 6000, 4000]\n",
    "})\n",
    "\n",
    "print(\"Employees DataFrame:\")\n",
    "print(employees)\n",
    "print(\"\\nDepartments DataFrame:\")\n",
    "print(departments)\n",
    "print(\"\\nSalaries DataFrame:\")\n",
    "print(salaries)\n",
    "\n",
    "# Inner join (only matching records)\n",
    "print(\"\\nInner join employees and departments:\")\n",
    "inner_join = pd.merge(employees, departments, on='DepartmentID', how='inner')\n",
    "print(inner_join)\n",
    "\n",
    "# Left join (all records from left table)\n",
    "print(\"\\nLeft join employees and departments:\")\n",
    "left_join = pd.merge(employees, departments, on='DepartmentID', how='left')\n",
    "print(left_join)\n",
    "\n",
    "# Right join (all records from right table)\n",
    "print(\"\\nRight join employees and departments:\")\n",
    "right_join = pd.merge(employees, departments, on='DepartmentID', how='right')\n",
    "print(right_join)\n",
    "\n",
    "# Outer join (all records from both tables)\n",
    "print(\"\\nOuter join employees and departments:\")\n",
    "outer_join = pd.merge(employees, departments, on='DepartmentID', how='outer')\n",
    "print(outer_join)\n",
    "\n",
    "# Join with different column names\n",
    "print(\"\\nJoin employees and salaries on EmployeeID:\")\n",
    "emp_salaries = pd.merge(employees, salaries, on='EmployeeID', how='left')\n",
    "print(emp_salaries)\n",
    "\n",
    "# Multiple joins\n",
    "print(\"\\nJoining all three tables:\")\n",
    "all_data = pd.merge(pd.merge(employees, departments, on='DepartmentID'), \n",
    "                   salaries, on='EmployeeID', how='left')\n",
    "print(all_data)\n",
    "\n",
    "# Joining on index\n",
    "indexed_dept = departments.set_index('DepartmentID')\n",
    "indexed_emp = employees.set_index('DepartmentID')\n",
    "print(\"\\nJoin on index:\")\n",
    "print(indexed_emp.join(indexed_dept))\n",
    "\n",
    "\n",
    "# ### 3.3 Reshaping Data: Pivot, Melt, Stack, and Unstack\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "53b8fe5d",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "\n",
    "# Create a sample DataFrame\n",
    "data = {\n",
    "    'Date': ['2023-01-01', '2023-01-01', '2023-01-01', '2023-01-02', '2023-01-02', '2023-01-02'],\n",
    "    'Product': ['A', 'B', 'C', 'A', 'B', 'C'],\n",
    "    'Region': ['East', 'West', 'North', 'East', 'West', 'South'],\n",
    "    'Sales': [100, 200, 150, 120, 210, 160],\n",
    "    'Units': [10, 20, 15, 12, 21, 16]\n",
    "}\n",
    "\n",
    "df = pd.DataFrame(data)\n",
    "print(\"Sample DataFrame:\")\n",
    "print(df)\n",
    "\n",
    "# Pivot: Reshape from long to wide format\n",
    "pivot_table = df.pivot(index='Date', columns='Product', values='Sales')\n",
    "print(\"\\nPivot table (Date vs Product with Sales values):\")\n",
    "print(pivot_table)\n",
    "\n",
    "# Pivot table with aggregation\n",
    "pivot_agg = pd.pivot_table(df, index='Date', columns='Product', \n",
    "                          values=['Sales', 'Units'], aggfunc='sum')\n",
    "print(\"\\nPivot table with multiple values and aggregation:\")\n",
    "print(pivot_agg)\n",
    "\n",
    "# Pivot table with multiple indices and columns\n",
    "pivot_complex = pd.pivot_table(df, index=['Date'], columns=['Product', 'Region'], \n",
    "                              values='Sales', aggfunc='sum')\n",
    "print(\"\\nComplex pivot table:\")\n",
    "print(pivot_complex)\n",
    "\n",
    "# Melt: Reshape from wide to long format\n",
    "# First, create a wide-format DataFrame\n",
    "wide_df = pivot_table.reset_index()\n",
    "print(\"\\nWide format DataFrame:\")\n",
    "print(wide_df)\n",
    "\n",
    "# Melt to convert back to long format\n",
    "melted_df = pd.melt(wide_df, id_vars=['Date'], value_vars=['A', 'B', 'C'],\n",
    "                   var_name='Product', value_name='Sales')\n",
    "print(\"\\nMelted (long format) DataFrame:\")\n",
    "print(melted_df)\n",
    "\n",
    "# Stack and unstack\n",
    "# Stack: pivoted columns become a MultiIndex in rows\n",
    "stacked = pivot_table.stack()\n",
    "print(\"\\nStacked DataFrame:\")\n",
    "print(stacked)\n",
    "\n",
    "# Unstack: MultiIndex in rows become pivoted columns\n",
    "unstacked = stacked.unstack()\n",
    "print(\"\\nUnstacked DataFrame (back to pivot table):\")\n",
    "print(unstacked)\n",
    "\n",
    "# Unstack at different levels\n",
    "multi_idx_df = df.set_index(['Date', 'Product', 'Region'])['Sales']\n",
    "print(\"\\nMulti-indexed Series:\")\n",
    "print(multi_idx_df)\n",
    "\n",
    "print(\"\\nUnstacked at level 'Product':\")\n",
    "print(multi_idx_df.unstack('Product'))\n",
    "\n",
    "\n",
    "# ### 3.4 Time Series Data Handling\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6c69dbcf",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "\n",
    "# Create a time series DataFrame\n",
    "dates = pd.date_range(start='2023-01-01', end='2023-01-10', freq='D')\n",
    "ts_data = {\n",
    "    'Date': dates,\n",
    "    'Value': [100, 105, 98, 103, 110, 112, 115, 113, 118, 120]\n",
    "}\n",
    "\n",
    "ts_df = pd.DataFrame(ts_data)\n",
    "print(\"Time series DataFrame:\")\n",
    "print(ts_df)\n",
    "\n",
    "# Setting the date as index\n",
    "ts_df = ts_df.set_index('Date')\n",
    "print(\"\\nTime series with Date index:\")\n",
    "print(ts_df)\n",
    "\n",
    "# Date range and frequency\n",
    "print(\"\\nDate range with weekly frequency:\")\n",
    "weekly_dates = pd.date_range(start='2023-01-01', periods=10, freq='W')\n",
    "print(weekly_dates)\n",
    "\n",
    "print(\"\\nDate range with business day frequency:\")\n",
    "business_dates = pd.date_range(start='2023-01-01', periods=10, freq='B')\n",
    "print(business_dates)\n",
    "\n",
    "# Resampling - downsampling (reducing frequency)\n",
    "print(\"\\nMonthly average (downsampling):\")\n",
    "print(ts_df.resample('M').mean())\n",
    "\n",
    "# Resampling - upsampling (increasing frequency)\n",
    "print(\"\\nDaily to hourly (upsampling with forward fill):\")\n",
    "hourly_df = ts_df.resample('H').ffill().head(24)  # Show first 24 hours\n",
    "print(hourly_df)\n",
    "\n",
    "# Shifting data (lagging)\n",
    "print(\"\\nShifted data (1-day lag):\")\n",
    "print(ts_df.shift(1))\n",
    "\n",
    "# Rolling windows\n",
    "print(\"\\n3-day rolling average:\")\n",
    "print(ts_df.rolling(window=3).mean())\n",
    "\n",
    "# Time-based indexing\n",
    "print(\"\\nData for specific date:\")\n",
    "print(ts_df.loc['2023-01-05'])\n",
    "\n",
    "print(\"\\nData for date range:\")\n",
    "print(ts_df.loc['2023-01-03':'2023-01-07'])\n",
    "\n",
    "# Date components\n",
    "ts_df = ts_df.reset_index()  # Bring Date back as a column for demonstration\n",
    "ts_df['Year'] = ts_df['Date'].dt.year\n",
    "ts_df['Month'] = ts_df['Date'].dt.month\n",
    "ts_df['Day'] = ts_df['Date'].dt.day\n",
    "ts_df['Weekday'] = ts_df['Date'].dt.day_name()\n",
    "\n",
    "print(\"\\nExtracted date components:\")\n",
    "print(ts_df)\n",
    "\n",
    "\n",
    "# ## 4. Real-world Applications of Pandas in Machine Learning\n",
    "\n",
    "# ### 4.1 Data Cleaning and Preprocessing\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2f10a0ce",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "\n",
    "# Import necessary libraries\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn.preprocessing import StandardScaler, OneHotEncoder\n",
    "from sklearn.impute import SimpleImputer\n",
    "from sklearn.compose import ColumnTransformer\n",
    "from sklearn.pipeline import Pipeline\n",
    "\n",
    "# Create a sample dataset with various issues\n",
    "np.random.seed(42)\n",
    "n_samples = 1000\n",
    "\n",
    "# Create synthetic data\n",
    "data = {\n",
    "    'age': np.random.normal(35, 10, n_samples),\n",
    "    'income': np.random.normal(60000, 15000, n_samples),\n",
    "    'education': np.random.choice(['High School', 'Bachelor', 'Master', 'PhD', None], n_samples, \n",
    "                                 p=[0.3, 0.4, 0.2, 0.05, 0.05]),\n",
    "    'employment': np.random.choice(['Full-time', 'Part-time', 'Unemployed', 'Self-employed', None], n_samples,\n",
    "                                  p=[0.6, 0.2, 0.1, 0.05, 0.05]),\n",
    "    'has_car': np.random.choice([True, False, None], n_samples, p=[0.7, 0.25, 0.05]),\n",
    "    'credit_score': np.random.normal(700, 100, n_samples)\n",
    "}\n",
    "\n",
    "# Introduce some outliers\n",
    "data['age'][0:10] = np.random.uniform(80, 100, 10)\n",
    "data['income'][10:20] = np.random.uniform(150000, 200000, 10)\n",
    "data['credit_score'][20:30] = np.random.uniform(300, 400, 10)\n",
    "\n",
    "# Create DataFrame\n",
    "df = pd.DataFrame(data)\n",
    "\n",
    "# Introduce some missing values\n",
    "for col in df.columns:\n",
    "    mask = np.random.choice([True, False], n_samples, p=[0.05, 0.95])\n",
    "    df.loc[mask, col] = np.nan\n",
    "\n",
    "print(\"Sample of raw data with issues:\")\n",
    "print(df.head())\n",
    "\n",
    "print(\"\\nData information:\")\n",
    "df.info()\n",
    "\n",
    "print(\"\\nMissing values per column:\")\n",
    "print(df.isnull().sum())\n",
    "\n",
    "print(\"\\nSummary statistics:\")\n",
    "print(df.describe())\n",
    "\n",
    "# Data Cleaning Steps\n",
    "\n",
    "# 1. Handle missing values\n",
    "# For numerical columns: impute with median\n",
    "# For categorical columns: impute with most frequent value\n",
    "print(\"\\n=== Handling Missing Values ===\")\n",
    "\n",
    "numerical_cols = ['age', 'income', 'credit_score']\n",
    "categorical_cols = ['education', 'employment']\n",
    "boolean_cols = ['has_car']\n",
    "\n",
    "# Impute missing values\n",
    "df_cleaned = df.copy()\n",
    "for col in numerical_cols:\n",
    "    median_val = df[col].median()\n",
    "    df_cleaned[col] = df_cleaned[col].fillna(median_val)\n",
    "    print(f\"Imputed {col} missing values with median: {median_val:.2f}\")\n",
    "\n",
    "for col in categorical_cols:\n",
    "    mode_val = df[col].mode()[0]\n",
    "    df_cleaned[col] = df_cleaned[col].fillna(mode_val)\n",
    "    print(f\"Imputed {col} missing values with mode: {mode_val}\")\n",
    "\n",
    "for col in boolean_cols:\n",
    "    mode_val = df[col].mode()[0]\n",
    "    df_cleaned[col] = df_cleaned[col].fillna(mode_val)\n",
    "    print(f\"Imputed {col} missing values with mode: {mode_val}\")\n",
    "\n",
    "# 2. Handle outliers using IQR method\n",
    "print(\"\\n=== Handling Outliers ===\")\n",
    "for col in numerical_cols:\n",
    "    Q1 = df_cleaned[col].quantile(0.25)\n",
    "    Q3 = df_cleaned[col].quantile(0.75)\n",
    "    IQR = Q3 - Q1\n",
    "    lower_bound = Q1 - 1.5 * IQR\n",
    "    upper_bound = Q3 + 1.5 * IQR\n",
    "    \n",
    "    # Count outliers\n",
    "    outliers = df_cleaned[(df_cleaned[col] < lower_bound) | (df_cleaned[col] > upper_bound)][col]\n",
    "    print(f\"Found {len(outliers)} outliers in {col}\")\n",
    "    \n",
    "    # Cap outliers\n",
    "    df_cleaned[col] = df_cleaned[col].clip(lower=lower_bound, upper=upper_bound)\n",
    "    print(f\"Capped {col} to range: [{lower_bound:.2f}, {upper_bound:.2f}]\")\n",
    "\n",
    "# 3. Feature Engineering\n",
    "print(\"\\n=== Feature Engineering ===\")\n",
    "# Create age groups\n",
    "bins = [0, 18, 30, 45, 60, 100]\n",
    "labels = ['Under 18', '18-30', '31-45', '46-60', 'Over 60']\n",
    "df_cleaned['age_group'] = pd.cut(df_cleaned['age'], bins=bins, labels=labels)\n",
    "print(\"Created 'age_group' feature:\")\n",
    "print(df_cleaned['age_group'].value_counts())\n",
    "\n",
    "# Create income brackets\n",
    "bins = [0, 30000, 60000, 100000, 200000]\n",
    "labels = ['Low', 'Medium', 'High', 'Very High']\n",
    "df_cleaned['income_bracket'] = pd.cut(df_cleaned['income'], bins=bins, labels=labels)\n",
    "print(\"\\nCreated 'income_bracket' feature:\")\n",
    "print(df_cleaned['income_bracket'].value_counts())\n",
    "\n",
    "# 4. Encode categorical variables\n",
    "print(\"\\n=== Encoding Categorical Variables ===\")\n",
    "# One-hot encode categorical columns\n",
    "df_encoded = pd.get_dummies(df_cleaned, columns=['education', 'employment', 'age_group', 'income_bracket'])\n",
    "print(f\"DataFrame expanded from {df_cleaned.shape[1]} to {df_encoded.shape[1]} columns after one-hot encoding\")\n",
    "\n",
    "# 5. Normalize numerical features\n",
    "print(\"\\n=== Normalizing Numerical Features ===\")\n",
    "scaler = StandardScaler()\n",
    "df_encoded[numerical_cols] = scaler.fit_transform(df_encoded[numerical_cols])\n",
    "print(\"Normalized numerical features using StandardScaler\")\n",
    "\n",
    "print(\"\\nFinal processed data sample:\")\n",
    "print(df_encoded.head())\n",
    "\n",
    "\n",
    "# ### 4.2 Exploratory Data Analysis (EDA) with Pandas\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f8853b56",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "\n",
    "# Import necessary libraries\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "# Set up plotting\n",
    "plt.style.use('ggplot')\n",
    "plt.rcParams['figure.figsize'] = (12, 8)\n",
    "\n",
    "# Create a synthetic dataset for EDA\n",
    "np.random.seed(42)\n",
    "n_samples = 1000\n",
    "\n",
    "# Create synthetic customer data\n",
    "data = {\n",
    "    'customer_id': range(1, n_samples + 1),\n",
    "    'age': np.random.normal(35, 10, n_samples).astype(int),\n",
    "    'income': np.random.normal(60000, 15000, n_samples),\n",
    "    'spending': np.random.normal(500, 150, n_samples),\n",
    "    'education': np.random.choice(['High School', 'Bachelor', 'Master', 'PhD'], n_samples, \n",
    "                                 p=[0.3, 0.4, 0.2, 0.1]),\n",
    "    'location': np.random.choice(['Urban', 'Suburban', 'Rural'], n_samples, p=[0.6, 0.3, 0.1]),\n",
    "    'is_married': np.random.choice([True, False], n_samples, p=[0.6, 0.4]),\n",
    "    'has_children': np.random.choice([True, False], n_samples, p=[0.4, 0.6]),\n",
    "    'signup_date': pd.date_range(start='2020-01-01', periods=n_samples),\n",
    "    'last_purchase': pd.date_range(start='2023-01-01', periods=n_samples),\n",
    "    'loyalty_score': np.random.randint(1, 11, n_samples)\n",
    "}\n",
    "\n",
    "# Create correlations between variables\n",
    "# Higher income -> higher spending\n",
    "data['spending'] = data['spending'] + data['income'] * 0.005\n",
    "# Married people with children spend more\n",
    "data['spending'] = np.where(data['is_married'] & data['has_children'], \n",
    "                           data['spending'] * 1.2, data['spending'])\n",
    "# Higher education -> higher income\n",
    "education_multiplier = {'High School': 0.8, 'Bachelor': 1.0, 'Master': 1.3, 'PhD': 1.5}\n",
    "for edu, mult in education_multiplier.items():\n",
    "    data['income'] = np.where(data['education'] == edu, data['income'] * mult, data['income'])\n",
    "\n",
    "# Create DataFrame\n",
    "df = pd.DataFrame(data)\n",
    "\n",
    "print(\"Sample of customer data:\")\n",
    "print(df.head())\n",
    "\n",
    "# 1. Basic Data Exploration\n",
    "print(\"\\n=== Basic Data Exploration ===\")\n",
    "print(\"\\nDataFrame shape:\", df.shape)\n",
    "print(\"\\nData types:\")\n",
    "print(df.dtypes)\n",
    "print(\"\\nSummary statistics for numerical columns:\")\n",
    "print(df.describe())\n",
    "print(\"\\nSummary for categorical columns:\")\n",
    "print(df.describe(include=['object', 'bool']))\n",
    "\n",
    "# 2. Distribution Analysis\n",
    "print(\"\\n=== Distribution Analysis ===\")\n",
    "# Histogram of age distribution\n",
    "plt.figure(figsize=(10, 6))\n",
    "sns.histplot(df['age'], kde=True, bins=30)\n",
    "plt.title('Age Distribution')\n",
    "plt.xlabel('Age')\n",
    "plt.ylabel('Frequency')\n",
    "plt.show()\n",
    "\n",
    "# Distribution of income\n",
    "plt.figure(figsize=(10, 6))\n",
    "sns.histplot(df['income'], kde=True, bins=30)\n",
    "plt.title('Income Distribution')\n",
    "plt.xlabel('Income')\n",
    "plt.ylabel('Frequency')\n",
    "plt.show()\n",
    "\n",
    "# 3. Categorical Data Analysis\n",
    "print(\"\\n=== Categorical Data Analysis ===\")\n",
    "# Education level distribution\n",
    "education_counts = df['education'].value_counts()\n",
    "print(\"Education level distribution:\")\n",
    "print(education_counts)\n",
    "\n",
    "plt.figure(figsize=(10, 6))\n",
    "sns.countplot(x='education', data=df, order=education_counts.index)\n",
    "plt.title('Education Level Distribution')\n",
    "plt.xlabel('Education Level')\n",
    "plt.ylabel('Count')\n",
    "plt.xticks(rotation=45)\n",
    "plt.show()\n",
    "\n",
    "# Location distribution\n",
    "location_counts = df['location'].value_counts()\n",
    "print(\"\\nLocation distribution:\")\n",
    "print(location_counts)\n",
    "\n",
    "plt.figure(figsize=(10, 6))\n",
    "sns.countplot(x='location', data=df, order=location_counts.index)\n",
    "plt.title('Location Distribution')\n",
    "plt.xlabel('Location')\n",
    "plt.ylabel('Count')\n",
    "plt.show()\n",
    "\n",
    "# 4. Relationship Analysis\n",
    "print(\"\\n=== Relationship Analysis ===\")\n",
    "# Correlation matrix for numerical variables\n",
    "numerical_df = df.select_dtypes(include=['int64', 'float64'])\n",
    "correlation = numerical_df.corr()\n",
    "print(\"Correlation matrix:\")\n",
    "print(correlation)\n",
    "\n",
    "plt.figure(figsize=(12, 8))\n",
    "sns.heatmap(correlation, annot=True, cmap='coolwarm', fmt='.2f')\n",
    "plt.title('Correlation Matrix')\n",
    "plt.show()\n",
    "\n",
    "# Spending by education level\n",
    "plt.figure(figsize=(12, 8))\n",
    "sns.boxplot(x='education', y='spending', data=df)\n",
    "plt.title('Spending by Education Level')\n",
    "plt.xlabel('Education Level')\n",
    "plt.ylabel('Spending')\n",
    "plt.xticks(rotation=45)\n",
    "plt.show()\n",
    "\n",
    "# 5. Group Analysis\n",
    "print(\"\\n=== Group Analysis ===\")\n",
    "# Average spending by location and education\n",
    "group_analysis = df.groupby(['location', 'education'])['spending'].agg(['mean', 'count'])\n",
    "print(\"Average spending by location and education:\")\n",
    "print(group_analysis)\n",
    "\n",
    "# Average income by education level\n",
    "income_by_education = df.groupby('education')['income'].mean().sort_values(ascending=False)\n",
    "print(\"\\nAverage income by education level:\")\n",
    "print(income_by_education)\n",
    "\n",
    "plt.figure(figsize=(12, 8))\n",
    "sns.barplot(x=income_by_education.index, y=income_by_education.values)\n",
    "plt.title('Average Income by Education Level')\n",
    "plt.xlabel('Education Level')\n",
    "plt.ylabel('Average Income')\n",
    "plt.xticks(rotation=45)\n",
    "plt.show()\n",
    "\n",
    "# 6. Time Series Analysis\n",
    "print(\"\\n=== Time Series Analysis ===\")\n",
    "# Convert signup_date to month and count signups by month\n",
    "df['signup_month'] = df['signup_date'].dt.to_period('M')\n",
    "signups_by_month = df.groupby('signup_month').size()\n",
    "\n",
    "plt.figure(figsize=(14, 6))\n",
    "signups_by_month.plot(kind='line', marker='o')\n",
    "plt.title('Customer Signups by Month')\n",
    "plt.xlabel('Month')\n",
    "plt.ylabel('Number of Signups')\n",
    "plt.grid(True)\n",
    "plt.show()\n",
    "\n",
    "# 7. Segmentation\n",
    "print(\"\\n=== Customer Segmentation ===\")\n",
    "# Create customer segments based on spending and loyalty\n",
    "df['spending_segment'] = pd.qcut(df['spending'], 3, labels=['Low', 'Medium', 'High'])\n",
    "df['loyalty_segment'] = pd.cut(df['loyalty_score'], bins=[0, 3, 7, 10], labels=['Low', 'Medium', 'High'])\n",
    "\n",
    "segment_counts = df.groupby(['spending_segment', 'loyalty_segment']).size().unstack()\n",
    "print(\"Customer segments by spending and loyalty:\")\n",
    "print(segment_counts)\n",
    "\n",
    "plt.figure(figsize=(12, 8))\n",
    "segment_counts.plot(kind='bar', stacked=True)\n",
    "plt.title('Customer Segments by Spending and Loyalty')\n",
    "plt.xlabel('Spending Segment')\n",
    "plt.ylabel('Number of Customers')\n",
    "plt.legend(title='Loyalty Segment')\n",
    "plt.show()\n",
    "\n",
    "# 8. Summary Insights\n",
    "print(\"\\n=== Summary Insights ===\")\n",
    "print(\"1. Age Distribution: Most customers are between 25-45 years old\")\n",
    "print(\"2. Income Distribution: Average income is around $60,000 with significant variation\")\n",
    "print(\"3. Education: Bachelor's degree is the most common education level\")\n",
    "print(\"4. Correlation: Strong positive correlation between income and spending\")\n",
    "print(\"5. Segmentation: Identified 9 customer segments based on spending and loyalty\")\n",
    "\n",
    "\n",
    "# ### 4.3 Feature Engineering for Machine Learning\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fd8b6dbf",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "\n",
    "# Import necessary libraries\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn.preprocessing import StandardScaler, OneHotEncoder, PolynomialFeatures\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.metrics import classification_report, accuracy_score\n",
    "\n",
    "# Create a synthetic dataset for feature engineering\n",
    "np.random.seed(42)\n",
    "n_samples = 1000\n",
    "\n",
    "# Create synthetic housing data\n",
    "data = {\n",
    "    'property_id': range(1, n_samples + 1),\n",
    "    'price': np.random.normal(300000, 100000, n_samples),\n",
    "    'sqft': np.random.normal(2000, 500, n_samples),\n",
    "    'bedrooms': np.random.choice([1, 2, 3, 4, 5], n_samples, p=[0.1, 0.2, 0.4, 0.2, 0.1]),\n",
    "    'bathrooms': np.random.choice([1, 1.5, 2, 2.5, 3, 3.5, 4], n_samples, \n",
    "                                 p=[0.1, 0.1, 0.3, 0.2, 0.2, 0.05, 0.05]),\n",
    "    'year_built': np.random.randint(1950, 2023, n_samples),\n",
    "    'lot_size': np.random.normal(10000, 5000, n_samples),\n",
    "    'neighborhood': np.random.choice(['Downtown', 'Suburb', 'Rural'], n_samples, p=[0.3, 0.5, 0.2]),\n",
    "    'has_garage': np.random.choice([True, False], n_samples, p=[0.8, 0.2]),\n",
    "    'has_pool': np.random.choice([True, False], n_samples, p=[0.2, 0.8]),\n",
    "    'condition': np.random.choice(['Poor', 'Fair', 'Good', 'Excellent'], n_samples, \n",
    "                                p=[0.1, 0.3, 0.4, 0.2]),\n",
    "    'days_on_market': np.random.exponential(30, n_samples),\n",
    "}\n",
    "\n",
    "# Create correlations and relationships\n",
    "# Newer houses have higher prices\n",
    "data['price'] += (data['year_built'] - 1950) * 500\n",
    "# Larger houses cost more\n",
    "data['price'] += data['sqft'] * 100\n",
    "# Houses with pools cost more\n",
    "data['price'] = np.where(data['has_pool'], data['price'] * 1.1, data['price'])\n",
    "# Better condition houses cost more\n",
    "condition_multiplier = {'Poor': 0.8, 'Fair': 0.9, 'Good': 1.1, 'Excellent': 1.2}\n",
    "for cond, mult in condition_multiplier.items():\n",
    "    data['price'] = np.where(data['condition'] == cond, data['price'] * mult, data['price'])\n",
    "# Neighborhood affects price\n",
    "neighborhood_multiplier = {'Downtown': 1.3, 'Suburb': 1.0, 'Rural': 0.8}\n",
    "for neigh, mult in neighborhood_multiplier.items():\n",
    "    data['price'] = np.where(data['neighborhood'] == neigh, data['price'] * mult, data['price'])\n",
    "\n",
    "# Create target variable: high_value (if price is in top 25%)\n",
    "price_threshold = np.percentile(data['price'], 75)\n",
    "data['high_value'] = data['price'] > price_threshold\n",
    "\n",
    "# Create DataFrame\n",
    "df = pd.DataFrame(data)\n",
    "\n",
    "print(\"Sample of housing data:\")\n",
    "print(df.head())\n",
    "\n",
    "print(\"\\nTarget distribution:\")\n",
    "print(df['high_value'].value_counts(normalize=True))\n",
    "\n",
    "# Feature Engineering Process\n",
    "\n",
    "print(\"\\n=== 1. Basic Feature Transformations ===\")\n",
    "\n",
    "# Create a copy for feature engineering\n",
    "df_features = df.drop(['property_id', 'high_value', 'price'], axis=1)\n",
    "\n",
    "# 1.1 Handling skewed features\n",
    "# Log transform for skewed numerical features\n",
    "skewed_features = ['lot_size', 'days_on_market']\n",
    "for feature in skewed_features:\n",
    "    df_features[f'{feature}_log'] = np.log1p(df_features[feature])\n",
    "    print(f\"Created log transform of {feature}\")\n",
    "\n",
    "# 1.2 Scaling features\n",
    "# We'll just demonstrate the code here without executing the scaling\n",
    "print(\"Code for scaling numerical features:\")\n",
    "print(\"scaler = StandardScaler()\")\n",
    "print(\"numerical_features = ['sqft', 'lot_size', 'lot_size_log', 'days_on_market', 'days_on_market_log']\")\n",
    "print(\"df_features[numerical_features] = scaler.fit_transform(df_features[numerical_features])\")\n",
    "\n",
    "print(\"\\n=== 2. Creating Interaction Features ===\")\n",
    "\n",
    "# 2.1 Ratio features\n",
    "df_features['sqft_per_bedroom'] = df_features['sqft'] / df_features['bedrooms']\n",
    "print(\"Created 'sqft_per_bedroom' ratio feature\")\n",
    "\n",
    "df_features['bedroom_bathroom_ratio'] = df_features['bedrooms'] / df_features['bathrooms']\n",
    "print(\"Created 'bedroom_bathroom_ratio' feature\")\n",
    "\n",
    "# 2.2 Polynomial features (example for sqft and bedrooms)\n",
    "print(\"Code for polynomial features:\")\n",
    "print(\"poly = PolynomialFeatures(degree=2, include_bias=False)\")\n",
    "print(\"poly_features = poly.fit_transform(df_features[['sqft', 'bedrooms']])\")\n",
    "print(\"poly_feature_names = [f'poly_{i}' for i in range(poly_features.shape[1])]\")\n",
    "print(\"poly_df = pd.DataFrame(poly_features, columns=poly_feature_names)\")\n",
    "print(\"df_features = pd.concat([df_features, poly_df], axis=1)\")\n",
    "\n",
    "print(\"\\n=== 3. Temporal Features ===\")\n",
    "\n",
    "# 3.1 Property age\n",
    "current_year = 2023\n",
    "df_features['property_age'] = current_year - df_features['year_built']\n",
    "print(\"Created 'property_age' feature\")\n",
    "\n",
    "# 3.2 Age bins\n",
    "bins = [0, 10, 20, 40, 70, 100]\n",
    "labels = ['New', 'Recent', 'Mid-age', 'Old', 'Very Old']\n",
    "df_features['age_category'] = pd.cut(df_features['property_age'], bins=bins, labels=labels)\n",
    "print(\"Created 'age_category' feature with bins:\", labels)\n",
    "\n",
    "print(\"\\n=== 4. Categorical Encoding ===\")\n",
    "\n",
    "# 4.1 One-hot encoding\n",
    "categorical_features = ['neighborhood', 'condition', 'age_category']\n",
    "print(\"Code for one-hot encoding:\")\n",
    "print(f\"df_features = pd.get_dummies(df_features, columns={categorical_features}, drop_first=True)\")\n",
    "\n",
    "# 4.2 Boolean to integer\n",
    "boolean_features = ['has_garage', 'has_pool']\n",
    "for feature in boolean_features:\n",
    "    df_features[feature] = df_features[feature].astype(int)\n",
    "    print(f\"Converted {feature} to integer (0/1)\")\n",
    "\n",
    "print(\"\\n=== 5. Feature Selection and Importance ===\")\n",
    "\n",
    "# Prepare data for model to demonstrate feature importance\n",
    "X = pd.get_dummies(df_features, columns=categorical_features, drop_first=True)\n",
    "y = df['high_value']\n",
    "\n",
    "# Split the data\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n",
    "\n",
    "# Train a Random Forest model\n",
    "model = RandomForestClassifier(n_estimators=100, random_state=42)\n",
    "model.fit(X_train, y_train)\n",
    "\n",
    "# Get feature importances\n",
    "feature_importances = pd.DataFrame({\n",
    "    'Feature': X.columns,\n",
    "    'Importance': model.feature_importances_\n",
    "}).sort_values('Importance', ascending=False)\n",
    "\n",
    "print(\"Top 10 most important features:\")\n",
    "print(feature_importances.head(10))\n",
    "\n",
    "# Evaluate model\n",
    "y_pred = model.predict(X_test)\n",
    "print(\"\\nModel accuracy:\", accuracy_score(y_test, y_pred))\n",
    "print(\"\\nClassification report:\")\n",
    "print(classification_report(y_test, y_pred))\n",
    "\n",
    "print(\"\\n=== 6. Summary of Feature Engineering Process ===\")\n",
    "print(\"1. Created log transformations for skewed features\")\n",
    "print(\"2. Added ratio features (sqft_per_bedroom, bedroom_bathroom_ratio)\")\n",
    "print(\"3. Created temporal features (property_age, age_category)\")\n",
    "print(\"4. Encoded categorical variables with one-hot encoding\")\n",
    "print(\"5. Converted boolean features to integers\")\n",
    "print(\"6. Identified most important features using Random Forest\")\n",
    "\n",
    "\n",
    "# ### 4.4 Building a Machine Learning Pipeline with Pandas\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fd075c66",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "\n",
    "# Import necessary libraries\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn.model_selection import train_test_split, GridSearchCV\n",
    "from sklearn.preprocessing import StandardScaler, OneHotEncoder\n",
    "from sklearn.compose import ColumnTransformer\n",
    "from sklearn.pipeline import Pipeline\n",
    "from sklearn.impute import SimpleImputer\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.metrics import classification_report, confusion_matrix, accuracy_score\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "# Create a synthetic dataset for a credit scoring model\n",
    "np.random.seed(42)\n",
    "n_samples = 1000\n",
    "\n",
    "# Create synthetic credit application data\n",
    "data = {\n",
    "    'customer_id': range(1, n_samples + 1),\n",
    "    'age': np.random.normal(40, 12, n_samples).astype(int),\n",
    "    'income': np.random.normal(60000, 20000, n_samples),\n",
    "    'employment_length': np.random.normal(8, 5, n_samples),\n",
    "    'debt_to_income': np.random.normal(0.3, 0.15, n_samples),\n",
    "    'credit_score': np.random.normal(700, 100, n_samples),\n",
    "    'loan_amount': np.random.normal(15000, 7000, n_samples),\n",
    "    'loan_term': np.random.choice([36, 60, 84], n_samples, p=[0.3, 0.5, 0.2]),\n",
    "    'education': np.random.choice(['High School', 'Bachelor', 'Master', 'PhD', None], n_samples, \n",
    "                                 p=[0.3, 0.4, 0.2, 0.05, 0.05]),\n",
    "    'employment_type': np.random.choice(['Full-time', 'Part-time', 'Self-employed', 'Unemployed', None], n_samples,\n",
    "                                      p=[0.7, 0.1, 0.1, 0.05, 0.05]),\n",
    "    'marital_status': np.random.choice(['Single', 'Married', 'Divorced', 'Widowed', None], n_samples,\n",
    "                                     p=[0.4, 0.4, 0.15, 0.03, 0.02]),\n",
    "    'has_mortgage': np.random.choice([True, False, None], n_samples, p=[0.4, 0.55, 0.05]),\n",
    "    'has_credit_card': np.random.choice([True, False, None], n_samples, p=[0.7, 0.25, 0.05]),\n",
    "    'loan_purpose': np.random.choice(['Auto', 'Home', 'Education', 'Medical', 'Other', None], n_samples,\n",
    "                                   p=[0.3, 0.25, 0.2, 0.1, 0.1, 0.05])\n",
    "}\n",
    "\n",
    "# Create target variable based on features\n",
    "# Higher credit score, income, and employment length increase approval chances\n",
    "# Higher debt-to-income and loan amount decrease approval chances\n",
    "approval_score = (\n",
    "    (data['credit_score'] - 500) / 300 * 0.4 +\n",
    "    (data['income'] - 30000) / 50000 * 0.2 +\n",
    "    (data['employment_length'] / 10) * 0.1 -\n",
    "    (data['debt_to_income'] * 2) * 0.2 -\n",
    "    (data['loan_amount'] - 5000) / 20000 * 0.1\n",
    ")\n",
    "# Add some randomness\n",
    "approval_score += np.random.normal(0, 0.2, n_samples)\n",
    "# Convert to binary outcome\n",
    "data['loan_approved'] = (approval_score > 0.5)\n",
    "\n",
    "# Create DataFrame\n",
    "df = pd.DataFrame(data)\n",
    "\n",
    "# Introduce some missing values\n",
    "for col in df.columns:\n",
    "    if col not in ['customer_id', 'loan_approved']:\n",
    "        mask = np.random.choice([True, False], n_samples, p=[0.05, 0.95])\n",
    "        df.loc[mask, col] = np.nan\n",
    "\n",
    "print(\"Sample of credit application data:\")\n",
    "print(df.head())\n",
    "\n",
    "print(\"\\nTarget distribution:\")\n",
    "print(df['loan_approved'].value_counts(normalize=True))\n",
    "\n",
    "print(\"\\nMissing values per column:\")\n",
    "print(df.isnull().sum())\n",
    "\n",
    "# Split the data\n",
    "X = df.drop(['customer_id', 'loan_approved'], axis=1)\n",
    "y = df['loan_approved']\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n",
    "\n",
    "print(\"\\nTraining set shape:\", X_train.shape)\n",
    "print(\"Testing set shape:\", X_test.shape)\n",
    "\n",
    "# Define feature types\n",
    "numerical_features = ['age', 'income', 'employment_length', 'debt_to_income', \n",
    "                      'credit_score', 'loan_amount', 'loan_term']\n",
    "categorical_features = ['education', 'employment_type', 'marital_status', 'loan_purpose']\n",
    "boolean_features = ['has_mortgage', 'has_credit_card']\n",
    "\n",
    "# Define preprocessing for numerical features\n",
    "numerical_transformer = Pipeline(steps=[\n",
    "    ('imputer', SimpleImputer(strategy='median')),\n",
    "    ('scaler', StandardScaler())\n",
    "])\n",
    "\n",
    "# Define preprocessing for categorical features\n",
    "categorical_transformer = Pipeline(steps=[\n",
    "    ('imputer', SimpleImputer(strategy='most_frequent')),\n",
    "    ('onehot', OneHotEncoder(handle_unknown='ignore'))\n",
    "])\n",
    "\n",
    "# Define preprocessing for boolean features\n",
    "boolean_transformer = Pipeline(steps=[\n",
    "    ('imputer', SimpleImputer(strategy='most_frequent'))\n",
    "])\n",
    "\n",
    "# Combine preprocessing steps\n",
    "preprocessor = ColumnTransformer(\n",
    "    transformers=[\n",
    "        ('num', numerical_transformer, numerical_features),\n",
    "        ('cat', categorical_transformer, categorical_features),\n",
    "        ('bool', boolean_transformer, boolean_features)\n",
    "    ])\n",
    "\n",
    "# Create the full pipeline\n",
    "pipeline = Pipeline(steps=[\n",
    "    ('preprocessor', preprocessor),\n",
    "    ('classifier', RandomForestClassifier(random_state=42))\n",
    "])\n",
    "\n",
    "# Train the model\n",
    "pipeline.fit(X_train, y_train)\n",
    "\n",
    "# Make predictions\n",
    "y_pred = pipeline.predict(X_test)\n",
    "y_prob = pipeline.predict_proba(X_test)[:, 1]\n",
    "\n",
    "# Evaluate the model\n",
    "print(\"\\n=== Model Evaluation ===\")\n",
    "print(\"Accuracy:\", accuracy_score(y_test, y_pred))\n",
    "print(\"\\nClassification Report:\")\n",
    "print(classification_report(y_test, y_pred))\n",
    "\n",
    "# Plot confusion matrix\n",
    "plt.figure(figsize=(8, 6))\n",
    "cm = confusion_matrix(y_test, y_pred)\n",
    "sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', cbar=False)\n",
    "plt.title('Confusion Matrix')\n",
    "plt.xlabel('Predicted Label')\n",
    "plt.ylabel('True Label')\n",
    "plt.show()\n",
    "\n",
    "# Feature importance analysis\n",
    "# Extract the trained classifier from the pipeline\n",
    "classifier = pipeline.named_steps['classifier']\n",
    "\n",
    "# Get feature names after preprocessing\n",
    "preprocessor = pipeline.named_steps['preprocessor']\n",
    "feature_names = []\n",
    "\n",
    "# Get numerical feature names\n",
    "feature_names.extend(numerical_features)\n",
    "\n",
    "# Get one-hot encoded feature names\n",
    "ohe = preprocessor.named_transformers_['cat'].named_steps['onehot']\n",
    "cat_feature_names = ohe.get_feature_names_out(categorical_features)\n",
    "feature_names.extend(cat_feature_names)\n",
    "\n",
    "# Get boolean feature names\n",
    "feature_names.extend(boolean_features)\n",
    "\n",
    "# Get feature importances\n",
    "importances = classifier.feature_importances_\n",
    "\n",
    "# Match feature importances with feature names\n",
    "# Note: This is an approximation as the actual feature names after preprocessing might differ\n",
    "if len(importances) == len(feature_names):\n",
    "    feature_importance = pd.DataFrame({\n",
    "        'Feature': feature_names,\n",
    "        'Importance': importances\n",
    "    }).sort_values('Importance', ascending=False)\n",
    "    \n",
    "    print(\"\\nTop 10 most important features:\")\n",
    "    print(feature_importance.head(10))\n",
    "    \n",
    "    # Plot feature importances\n",
    "    plt.figure(figsize=(12, 8))\n",
    "    sns.barplot(x='Importance', y='Feature', data=feature_importance.head(15))\n",
    "    plt.title('Feature Importance')\n",
    "    plt.tight_layout()\n",
    "    plt.show()\n",
    "else:\n",
    "    print(\"\\nFeature names and importances length mismatch. This can happen due to one-hot encoding.\")\n",
    "    print(f\"Number of importances: {len(importances)}\")\n",
    "    print(f\"Number of feature names: {len(feature_names)}\")\n",
    "\n",
    "# Hyperparameter tuning with GridSearchCV\n",
    "print(\"\\n=== Hyperparameter Tuning ===\")\n",
    "print(\"Note: This would typically be run, but we'll just show the code for demonstration purposes\")\n",
    "\n",
    "param_grid = {\n",
    "    'classifier__n_estimators': [50, 100, 200],\n",
    "    'classifier__max_depth': [None, 10, 20, 30],\n",
    "    'classifier__min_samples_split': [2, 5, 10],\n",
    "    'classifier__min_samples_leaf': [1, 2, 4]\n",
    "}\n",
    "\n",
    "print(\"Code for GridSearchCV:\")\n",
    "print(\"grid_search = GridSearchCV(pipeline, param_grid, cv=5, scoring='accuracy', n_jobs=-1)\")\n",
    "print(\"grid_search.fit(X_train, y_train)\")\n",
    "print(\"best_params = grid_search.best_params_\")\n",
    "print(\"best_score = grid_search.best_score_\")\n",
    "print(\"print('Best parameters:', best_params)\")\n",
    "print(\"print('Best cross-validation score:', best_score)\")\n",
    "print(\"best_model = grid_search.best_estimator_\")\n",
    "print(\"y_pred = best_model.predict(X_test)\")\n",
    "print(\"print('Test accuracy with tuned model:', accuracy_score(y_test, y_pred))\")\n",
    "\n",
    "# Summary\n",
    "print(\"\\n=== ML Pipeline Summary ===\")\n",
    "print(\"1. Data Preparation: Split data into training and testing sets\")\n",
    "print(\"2. Preprocessing: Created separate pipelines for numerical, categorical, and boolean features\")\n",
    "print(\"3. Model Training: Trained a Random Forest classifier\")\n",
    "print(\"4. Evaluation: Achieved good accuracy and identified important features\")\n",
    "print(\"5. Next Steps: Would typically perform hyperparameter tuning to optimize the model\")\n",
    "\n",
    "\n",
    "# ## 5. Test Your Knowledge\n",
    "\n",
    "# ### Exercise 1: Data Manipulation\n",
    "# \n",
    "# 1. Create a DataFrame with 5 rows and 3 columns (Name, Age, City).\n",
    "# 2. Add a new column 'Salary' with values.\n",
    "# 3. Filter the DataFrame to show only people older than 30.\n",
    "# 4. Sort the DataFrame by Age in descending order.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "415bcc18",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "\n",
    "# Your code here\n",
    "# Example solution:\n",
    "# 1. Create a DataFrame\n",
    "data = {\n",
    "    'Name': ['Alice', 'Bob', 'Charlie', 'David', 'Eve'],\n",
    "    'Age': [25, 35, 45, 30, 28],\n",
    "    'City': ['New York', 'Boston', 'Chicago', 'Denver', 'Miami']\n",
    "}\n",
    "df = pd.DataFrame(data)\n",
    "print(\"Original DataFrame:\")\n",
    "print(df)\n",
    "\n",
    "# 2. Add a new column 'Salary'\n",
    "df['Salary'] = [50000, 60000, 75000, 65000, 55000]\n",
    "print(\"\\nDataFrame with Salary column:\")\n",
    "print(df)\n",
    "\n",
    "# 3. Filter to show only people older than 30\n",
    "older_than_30 = df[df['Age'] > 30]\n",
    "print(\"\\nPeople older than 30:\")\n",
    "print(older_than_30)\n",
    "\n",
    "# 4. Sort by Age in descending order\n",
    "sorted_df = df.sort_values('Age', ascending=False)\n",
    "print(\"\\nSorted by Age (descending):\")\n",
    "print(sorted_df)\n",
    "\n",
    "\n",
    "# ### Exercise 2: Data Cleaning\n",
    "# \n",
    "# 1. Create a DataFrame with some missing values.\n",
    "# 2. Count the number of missing values in each column.\n",
    "# 3. Fill missing values with appropriate methods.\n",
    "# 4. Drop rows with any remaining missing values.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "07095411",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "\n",
    "# Your code here\n",
    "# Example solution:\n",
    "# 1. Create a DataFrame with missing values\n",
    "data = {\n",
    "    'A': [1, 2, np.nan, 4, 5],\n",
    "    'B': [np.nan, 2, 3, np.nan, 5],\n",
    "    'C': [1, 2, 3, 4, np.nan]\n",
    "}\n",
    "df = pd.DataFrame(data)\n",
    "print(\"DataFrame with missing values:\")\n",
    "print(df)\n",
    "\n",
    "# 2. Count missing values in each column\n",
    "missing_counts = df.isnull().sum()\n",
    "print(\"\\nMissing values per column:\")\n",
    "print(missing_counts)\n",
    "\n",
    "# 3. Fill missing values\n",
    "# Fill column A with the mean\n",
    "df['A'] = df['A'].fillna(df['A'].mean())\n",
    "# Fill column B with the median\n",
    "df['B'] = df['B'].fillna(df['B'].median())\n",
    "# Fill column C with a specific value\n",
    "df['C'] = df['C'].fillna(0)\n",
    "\n",
    "print(\"\\nDataFrame after filling missing values:\")\n",
    "print(df)\n",
    "\n",
    "# 4. Drop any remaining rows with missing values\n",
    "df_clean = df.dropna()\n",
    "print(\"\\nDataFrame after dropping rows with missing values:\")\n",
    "print(df_clean)\n",
    "\n",
    "\n",
    "# ### Exercise 3: Grouping and Aggregation\n",
    "# \n",
    "# 1. Create a DataFrame with columns: Department, Employee, Salary.\n",
    "# 2. Group by Department and calculate the average Salary.\n",
    "# 3. Find the Department with the highest average Salary.\n",
    "# 4. Calculate the total Salary by Department.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d2863d7b",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "\n",
    "# Your code here\n",
    "# Example solution:\n",
    "# 1. Create a DataFrame\n",
    "data = {\n",
    "    'Department': ['IT', 'HR', 'Finance', 'IT', 'HR', 'Finance', 'Marketing'],\n",
    "    'Employee': ['Alice', 'Bob', 'Charlie', 'David', 'Eve', 'Frank', 'Grace'],\n",
    "    'Salary': [65000, 55000, 70000, 60000, 50000, 75000, 65000]\n",
    "}\n",
    "df = pd.DataFrame(data)\n",
    "print(\"Original DataFrame:\")\n",
    "print(df)\n",
    "\n",
    "# 2. Group by Department and calculate average Salary\n",
    "avg_salary = df.groupby('Department')['Salary'].mean().reset_index()\n",
    "print(\"\\nAverage Salary by Department:\")\n",
    "print(avg_salary)\n",
    "\n",
    "# 3. Find Department with highest average Salary\n",
    "highest_avg = avg_salary.loc[avg_salary['Salary'].idxmax()]\n",
    "print(\"\\nDepartment with highest average Salary:\")\n",
    "print(highest_avg)\n",
    "\n",
    "# 4. Calculate total Salary by Department\n",
    "total_salary = df.groupby('Department')['Salary'].sum().reset_index()\n",
    "print(\"\\nTotal Salary by Department:\")\n",
    "print(total_salary)\n",
    "\n",
    "\n",
    "# ### Exercise 4: Time Series Analysis\n",
    "# \n",
    "# 1. Create a time series DataFrame with daily data for one month.\n",
    "# 2. Resample the data to weekly frequency.\n",
    "# 3. Calculate the rolling average with a 7-day window.\n",
    "# 4. Plot the original data and the rolling average.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8ad7c311",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "\n",
    "# Your code here\n",
    "# Example solution:\n",
    "# 1. Create a time series DataFrame\n",
    "dates = pd.date_range(start='2023-01-01', end='2023-01-31', freq='D')\n",
    "data = {\n",
    "    'Date': dates,\n",
    "    'Value': np.random.normal(100, 20, len(dates))\n",
    "}\n",
    "df = pd.DataFrame(data)\n",
    "df = df.set_index('Date')\n",
    "print(\"Time series DataFrame:\")\n",
    "print(df.head())\n",
    "\n",
    "# 2. Resample to weekly frequency\n",
    "weekly_data = df.resample('W').mean()\n",
    "print(\"\\nWeekly resampled data:\")\n",
    "print(weekly_data)\n",
    "\n",
    "# 3. Calculate 7-day rolling average\n",
    "rolling_avg = df.rolling(window=7).mean()\n",
    "print(\"\\n7-day rolling average:\")\n",
    "print(rolling_avg.head(10))\n",
    "\n",
    "# 4. Plot the data\n",
    "plt.figure(figsize=(12, 6))\n",
    "plt.plot(df.index, df['Value'], label='Original Data')\n",
    "plt.plot(rolling_avg.index, rolling_avg['Value'], label='7-day Rolling Average', linewidth=2)\n",
    "plt.title('Time Series Data with Rolling Average')\n",
    "plt.xlabel('Date')\n",
    "plt.ylabel('Value')\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "plt.show()\n",
    "\n",
    "\n",
    "# ## 6. Additional Resources\n",
    "# \n",
    "# - [Pandas Documentation](https://pandas.pydata.org/docs/)\n",
    "# - [Pandas Cheat Sheet](https://pandas.pydata.org/Pandas_Cheat_Sheet.pdf)\n",
    "# - [Hands-On Data Analysis with Pandas](https://github.com/stefmolin/Hands-On-Data-Analysis-with-Pandas-2nd-edition)\n",
    "# - [Data Analysis Projects With Pandas](https://github.com/mohammadreza-mohammadi94/Data-Analysis-Projects-With-Pandas)\n",
    "# - [Python for Data Analysis](https://wesmckinney.com/book/) by Wes McKinney (creator of pandas)\n",
    "#!/usr/bin/env python\n",
    "# coding: utf-8\n",
    "\n",
